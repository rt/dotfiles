
-- add_column.pre
--@LockTables marketing_promotion
ALTER TABLE settings.marketing_promotion
 ADD COLUMN promotion_end_timestamp TIMESTAMP WITHOUT TIME ZONE, -- new columns using naming standards.
 ADD COLUMN promotion_start_timestamp TIMESTAMP WITHOUT TIME ZONE, -- new columns using naming standards.
 ALTER COLUMN promotion_start_timestamp SET DEFAULT now();

-- update_new_column_with_old_values.pre
-- It is important to do an UPDATE manually because UPDATE operations are atomic and it does not lock the table.
UPDATE settings.marketing_promotion SET promotion_start_timestamp = CAST(promotion_start_date AS TIMESTAMP);
UPDATE settings.marketing_promotion SET promotion_end_timestamp = CAST(promotion_end_date AS TIMESTAMP);


-- create_view_add_trigger_and_function.sql.pre
-- This script was generated by the ddl2rename function, just add a check for
-- the Switchfly version, if you need to send the old column value casted to
-- the new value or empty you can do it in the function generated.

-- It is important to remember to use INSTEAD OF on the trigger because if you
-- are using AFTER/BEFORE EACH ROW you will need to handle recursive triggers
-- (as you are updating the same table the trigger will fire itself each time)


-- post 
-- drop old columns
-- Just remove the trigger, function and view generated from the script, rename
-- table to be the same as before and drop old columns not used anymore by new
-- code.

--@LockTables marketing_promotion
-- DROP trigger, function and view
-- RENAME shadow table to normal name.
-- DROP columns not used anymore (old columns)
DROP TRIGGER IF EXISTS insteadof_marketing_promotion_trg ON marketing_promotion;
DROP FUNCTION IF EXISTS insteadof_marketing_promotion_dml_fn();
DROP VIEW IF EXISTS marketing_promotion;
ALTER TABLE marketing_promotion_shadow RENAME TO marketing_promotion;
ALTER TABLE settings.marketing_promotion
 DROP COLUMN promotion_end_date,
 DROP COLUMN promotion_start_date;
